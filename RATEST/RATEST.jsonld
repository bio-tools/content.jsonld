{
  "@context": {
    "bsc": "http://bioschemas.org/",
    "edam": "http://edamontology.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "sc": "http://schema.org/",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph": [
    {
      "@id": "https://doi.org/10.1145/3299869.3320236",
      "@type": "sc:CreativeWork"
    },
    {
      "@id": "https://bio.tools/RATEST",
      "@type": "sc:SoftwareApplication",
      "sc:applicationSubCategory": {
        "@id": "edam:topic_0219"
      },
      "sc:citation": [
        "pubmed:31388247",
        "pmcid:PMC6684020",
        {
          "@id": "https://doi.org/10.1145/3299869.3320236"
        }
      ],
      "sc:description": "> HOMEPAGE MISSING! | Explaining Wrong Relational Queries Using Small Examples | We present a system called RATEST, designed to help debug relational queries against reference queries and test database instances. In many applications, e.g., classroom learning and regression testing, we test the correctness of a user query Q by evaluating it over a test database instance D and comparing its result with that of evaluating a reference (correct) query Q 0 over D. If Q(D) differs from Q 0(D), the user knows Q is incorrect. However, D can be large (often by design), which makes debugging Q difficult. The key idea behind RATEST is to show the user a much smaller database instance D' ⊆ D, which we call a counterexample, such that Q(D') ≠ Q 0(D'). RATEST builds on data provenance and constraint solving, and employs a suite of techniques to support, at interactive speed, complex queries involving differences and group-by aggregation",
      "sc:featureList": [
        {
          "@id": "edam:operation_0224"
        },
        {
          "@id": "edam:operation_3436"
        }
      ],
      "sc:name": "RATEST",
      "sc:url": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31388247"
    }
  ]
}