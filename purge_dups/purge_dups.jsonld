{
  "@context": {
    "bsc": "http://bioschemas.org/",
    "edam": "http://edamontology.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "sc": "http://schema.org/",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph": [
    {
      "@id": "https://doi.org/10.1101/729962",
      "@type": "sc:CreativeWork"
    },
    {
      "@id": "https://bio.tools/purge_dups",
      "@type": "sc:SoftwareApplication",
      "sc:applicationSubCategory": {
        "@id": "edam:topic_0196"
      },
      "sc:citation": {
        "@id": "https://doi.org/10.1101/729962"
      },
      "sc:description": "Identifying and removing haplotypic duplication in primary genome assemblies | haplotypic duplication identification tool | scripts/pd_config.py: script to generate a configuration file used by run_purge_dups.py | purge haplotigs and overlaps in an assembly based on read depth | Given a primary assembly pri_asm and an alternative assembly hap_asm (optional, if you have one), follow the steps shown below to build your own purge_dups pipeline, steps with same number can be run simultaneously. Among all the steps, although step 4 is optional, we highly recommend our users to do so, because assemblers may produce overrepresented seqeuences. In such a case, The final step 4 can be applied to remove those seqeuences",
      "sc:featureList": [
        {
          "@id": "edam:operation_3216"
        },
        {
          "@id": "edam:operation_0525"
        },
        {
          "@id": "edam:operation_3798"
        }
      ],
      "sc:license": "MIT",
      "sc:name": "purge_dups",
      "sc:url": "https://github.com/dfguan/purge_dups"
    }
  ]
}