{
  "@context": {
    "bsc": "http://bioschemas.org/",
    "edam": "http://edamontology.org/",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "sc": "http://schema.org/",
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  "@graph": [
    {
      "@id": "https://bio.tools/elPrep_autogenerated",
      "@type": "sc:SoftwareApplication",
      "sc:applicationSubCategory": {
        "@id": "edam:topic_3372"
      },
      "sc:citation": [
        "pubmed:31452597",
        {
          "@id": "https://doi.org/10.1177/1176934319869015"
        },
        "pmcid:PMC6698987"
      ],
      "sc:description": "> LOW CONFIDENCE! | > HOMEPAGE MISSING! | > NAME EQUAL TO (PUB. DIFFERENT) bio.tools/elprep | Comparing Ease of Programming in C++, Go, and Java for Implementing a Next-Generation Sequencing Tool | elPrep is an extensible multithreaded software framework for efficiently processing Sequence Alignment Map (SAM) Binary Alignment Map (BAM) files in next-generation sequencing pipelines. Similar to other SAM BAM tools, a key challenge in elPrep is memory management, as such programs need to manipulate large amounts of data. We therefore investigated 3 programming languages with support for assisted or automated memory management for implementing elPrep, namely C++, Go, and Java. We implemented a nontrivial subset of elPrep in all 3 programming languages and compared them by benchmarking their runtime performance and memory use to determine the best language in terms of computational performance",
      "sc:name": "elPrep_autogenerated",
      "sc:url": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31452597"
    },
    {
      "@id": "https://doi.org/10.1177/1176934319869015",
      "@type": "sc:CreativeWork"
    }
  ]
}